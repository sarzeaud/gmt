#
# Build GMT and run tests
#
name: Tests
on:
  push:
    # build master and 6.x branches
    branches:
      - master
      - 6.[0-9]+
      - github-actions  # TODO: remove this before merging
  pull_request:
  # schedule daily tests
  schedule:
    - cron: '0 12 * * *'

jobs:
  tests:
    name: ${{ matrix.name }}

    env:
      COASTLINEDIR: ${{ github.workspace }}/coastline
      INSTALLDIR: ${{ github.workspace }}/gmt-install-dir
      # disable auto-display of GMT plots
      GMT_END_SHOW: off

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - name: Linux - Compile only
            os: ubuntu-latest
            BUILD_DOCS  : false
            DEPLOY_DOCS : false
            PACKAGE     : false
            RUN_TESTS   : false

          - name: Linux - Compile only (no GDAL et al.)
            os: ubuntu-latest
            BUILD_DOCS  : false
            DEPLOY_DOCS : false
            PACKAGE     : false
            RUN_TESTS   : false
            EXCLUDE_OPTIONAL : true

          - name: Linux - Build docs + Deploy docs + Package
            os: ubuntu-latest
            BUILD_DOCS  : true
            DEPLOY_DOCS : true
            PACKAGE     : true
            RUN_TESTS   : false

          - name: Linux - Tests
            os: ubuntu-latest
            BUILD_DOCS  : false
            DEPLOY_DOCS : false
            PACKAGE     : false
            RUN_TESTS   : true

          # macOS
          - name: macOS - Compile only
            os: macos-latest
            BUILD_DOCS  : false
            DEPLOY_DOCS : false
            PACKAGE     : false
            RUN_TESTS   : false

          - name: macOS - Build docs + Deploy docs + Package
            os: macos-latest
            BUILD_DOCS  : true
            DEPLOY_DOCS : false
            PACKAGE     : true
            RUN_TESTS   : false

          - name: macOS - Tests
            os: macos-latest
            BUILD_DOCS  : false
            DEPLOY_DOCS : false
            PACKAGE     : false
            RUN_TESTS   : true

          # Windows
          - name: Windows - Compile only
            os: windows-latest
            BUILD_DOCS  : false
            DEPLOY_DOCS : false
            PACKAGE     : false
            RUN_TESTS   : false


    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install GMT dependencies
        run: |
          # $RUNNER_OS can be Linux, macOS or Windows
          # The following command converts $RUNNER_OS to lowercase
          os=$(echo "$RUNNER_OS" | tr '[:upper:]' '[:lower:]')
          bash ci/install-dependencies-${os}.sh
        shell: bash
        env:
          RUN_TESTS: ${{ matrix.RUN_TESTS }}
          BUILD_DOCS: ${{ matrix.BUILD_DOCS }}
          PACKAGE: ${{ matrix.PACKAGE }}
          EXCLUDE_OPTIONAL : ${{ matrix.EXCLUDE_OPTIONAL }}

      - name: Add Sphinx to PATH
        run: echo "$(python3 -m site --user-base)/bin" >> $GITHUB_PATH
        if: matrix.BUILD_DOCS == true

      - name: Cache GSHHG and DCW data
        uses: actions/cache@v2
        id: cache-coastline
        with:
          path: ${{ env.COASTLINEDIR }}
          key: coastline-${{ hashFiles('ci/download-coastlines.sh') }}

      - name: Download coastlines
        run: bash ci/download-coastlines.sh
        if: steps.cache-coastline.outputs.cache-hit != 'true'

      - name: Configure GMT
        run: bash ci/config-gmt-unix.sh
        env:
          RUN_TESTS: ${{ matrix.RUN_TESTS }}
          BUILD_DOCS: ${{ matrix.BUILD_DOCS }}

      - name: Compile GMT
        run: |
          mkdir -p build
          cd build
          cmake -G Ninja ..
          cmake --build .

      - name: Download cached GMT remote data from Github Artifacts
        uses: dawidd6/action-download-artifact@v2.10.0
        with:
          workflow: ci-caches.yml
          name: gmt-cache
          path: .gmt

      # Move downloaded files to ~/.gmt directory and list them
      - name: Move and list downloaded remote files
        run: |
          mkdir -p ~/.gmt
          mv .gmt/* ~/.gmt
          ls -lRh ~/.gmt

      - name: Build documentations
        run: |
          set -x -e
          cd build
          cmake --build . --target docs_depends
          cmake --build . --target optimize_images
          cmake --build . --target animation
          cmake --build . --target docs_html
          # if html.log isn't empty (i.e., sphinx raise warnings), return 1
          ! [ -s doc/rst/html.log ]
          cmake --build . --target docs_man
          # if man.log isn't empty (i.e., sphinx raise warnings), return 1
          ! [ -s doc/rst/man.log ]
        if: matrix.BUILD_DOCS == true

      - name: Install GMT
        run: |
          set -x -e
          cd build
          cmake --build . --target install
          # Add GMT PATH to bin
          echo "${INSTALLDIR}/bin" >> $GITHUB_PATH

      - name: Check a few simple commands
        run: |
          set -x -e
          gmt --version
          gmt-config --all
          gmt defaults -Vd
          gmt pscoast -R0/10/0/10 -JM6i -Ba -Ggray -ENG+p1p,blue -P -Vd > test.ps
          gmt begin && gmt coast -R0/10/0/10 -JM6i -Ba -Ggray -ENG+p1p,blue -Vd && gmt end
          gmt grdimage @earth_relief_01d -JH10c -Baf -pdf map
          gmt earthtide -T2018-06-18T12:00:00 -Gsolid_tide_up.grd

      # Run full tests and rerun failed tests
      - name: Run full tests
        run: |
          set -x -e
          cd build
          ctest ${CTEST_ARGS} || ctest ${CTEST_ARGS} --rerun-failed || ctest ${CTEST_ARGS} --rerun-failed
        env:
          CTEST_ARGS : "--output-on-failure --force-new-ctest-process -j4 --timeout 480"
        if: matrix.RUN_TESTS == true

      - name: Upload build directory if failed
        uses: actions/upload-artifact@v2
        with:
          name: BuildDirectory-${{ runner.os }}
          path: build/
        if: ${{ failure() }}

      - name: Package GMT
        run: |
          set -x -e
          cd build
          cmake --build . --target gmt_release
          cmake --build . --target gmt_release_tar
          if [ "$RUNNER_OS" = "macOS" ]; then
            cpack -G Bundle
          fi
          cmake -E sha256sum gmt-*-*.*
        if: matrix.PACKAGE == true
